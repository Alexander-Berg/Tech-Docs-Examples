feature: slider

description: Блок slider («слайдер») — управляющий элемент интерфейса для удобного и наглядного выбора диапазона значений. Позволяет создавать следующие разновидности слайдеров - с одним ползунком — для выбора одного значения из диапазона; с двумя ползунками — для выбора диапазона значений; с равномерной шкалой — движение ползунка по шкале происходит равномерно с постоянным шагом; с неравномерной шкалой — движение ползунка по шкале происходит неравномерно с изменяющимся значением шага. Поля ввода и ползунки связаны – значения полей input синхронно изменяются при перетягивании ползунков. Блок предоставляет возможность настройки визуального отображения слайдера.

specs:
  Проверить корректность работы примера № 1 (С одним бегунком и равномерной шкалой):
    Общая проверка (пример № 1 - С одним бегунком и равномерной шкалой):
      - do: Проверить корректность отображения примера примера № 1 (С одним бегунком и равномерной шкалой)
      - assert: Пример представляет собой равномерную шкалу от 0 до 100 с бегунком, по умолчанию выставленным на середине шкалы
      - assert: Внешний вид примера соответствует внешнему виду примера в предыдущей версии библиотеки
    Проверка реакции на управление контролами при помощи мышки (пример № 1 - С одним бегунком и равномерной шкалой):
      - do: Навести курсор мышки на ползунок
      - assert: Рамка ползунка становится темнее
      - do: Нажать на ползунок левой клавишей мыши
      - assert: Ползуноке переходит в нажатое состояние (фон ползунка становится темнее)
      - do: Убрать курсор мыши с ползунка
      - assert: Ползунок возвращается в исходное состояние
      - do: Нажать левую клавишу мыши на ползунке и передвинуть курсор мыши в начало шкалы
      - assert: По ходу перемещения ползунка на нем будет меняться значение, а в начале шкалы значение в ползунке будет равно нулю
      - assert: При перемещении ползунка по шкале значение ползунка подставляется в поле ввода над шкалой
      - do: Кликнуть левой клавишей мыши по шкале слева и справа от ползунка
      - assert: Ползунок перемещается на шкале в то место, куда кликнули левой кнопкой мыши
    Проверка реакции на управление контролами при помощи клавиатуры (пример № 1 - С одним бегунком и равномерной шкалой):
      - do: Нажать клавишу Tab на клавиатуре
      - assert: На ползунок можно переместить фокус нажатием клавиши Tab; когда элемент в фокусе, у него появляется желтая рамка
      - do: Нажать клавиши стрелок 'влево' или 'вправо'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода
      - do: Нажать клавиши стрелок 'вниз' или 'вверх'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода

  Проверить корректность работы примера № 2 (С заданным диапазоном, неравномерной шкалой и собственной функцией определения допустимых значений):
    Общая проверка (пример № 2 - С заданным диапазоном, неравномерной шкалой и собственной функцией определения допустимых значений):
      - do: Проверить корректность отображения примера примера № 2 (С заданным диапазоном, неравномерной шкалой и собственной функцией определения допустимых значений)
      - assert: Пример представляет собой неравномерную шкалу от 0 до 500 с заданным диапазоном от 10 до 300; по умолчанию бегунке отображается значение 40
      - assert: Внешний вид примера соответствует внешнему виду примера в предыдущей версии библиотеки
    Проверка реакции на управление контролами при помощи мышки (пример № 2 - С заданным диапазоном, неравномерной шкалой и собственной функцией определения допустимых значений):
      - do: Левой клавишей мыши переместить ползунок за ограничители в начале и конце шкалы (в данном случае начало шкалы - это крайняя левая рисочка, а конец шкалы - крайняя правая рисочка)
      - assert: Ползунок нельзя переместить за пределы ограничителей при помощи мыши
      - do: Кликнуть мышкой на шкалу за пределами заданного диапазона
      - assert: Ползунок перемещается соответственно на левый или правый ограничитель
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода
    Проверка реакции на управление контролами при помощи клавиатуры (пример № 2 - С заданным диапазоном, неравномерной шкалой и собственной функцией определения допустимых значений):
      - do: Навести клавишей Tab фокус на ползунок, затем двигать его влево и вправо по шкале клавишами-стрелками
      - assert: Ползунок нельзя переместить за пределы ограничителей при помощи клавиатуры
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода

  Проверить корректность работы примера № 3 (С рисочками):
    Проверка реакции на управление контролами при помощи мышки (пример № 3 - С рисочками):
      - do: В примере № 3 (С рисочками) зажать ползунок на шкале примера левой клавишей мыши и передвинуть курсор мыши в начало шкалы (в данном случае начало шкалы - это крайняя левая рисочка).
      - assert: По ходу перемещения ползунка на нем будет меняться значение; ползунок перемещается на крайнюю левую риску; значение в ползунке равно значению, на которое установлена левая рисочка
      - assert: При перемещении ползунка по шкале значение ползунка подставляется в поле ввода над шкалой
      - do: Кликнуть левой клавишей мыши по шкале слева и справа от ползунка
      - assert: Ползунок перемещается на шкале в то место, куда кликнули
    Проверка реакции на управление контролами при помощи клавиатуры (пример № 3 - С рисочками):
      - do: Навести фокус на ползунок примера примера № 3 (С рисочками) нажатием клавиши Tab
      - assert: Когда элемент в фокусе, у него появляется желтая рамка
      - do: Нажать на клавиши-стрелки 'влево' или 'вправо'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода
      - do: Нажать на клавиши-стрелки 'вниз' или вверх'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале
      - assert: При изменении положения ползунка соответствующим образом меняется значение в поле ввода

  Проверить корректность работы примера № 4 (Со скрытыми инпутами):
    Проверка реакции на управление контролами при помощи мышки (пример № 4 - Со скрытыми инпутами):
      - do: Зажать ползунок на шкале примера № 4 (Со скрытыми инпутами) левой клавишей мыши и передвинуть курсор мыши в начало шкалы
      - assert: По ходу перемещения ползунка на нем будет меняться значение; ползунок перемещается на крайнюю левую риску; значение в ползунке равно значению, на которое установлена левая рисочка
      - do: Кликнуть левой клавишей мыши по шкале слева и справа от ползунка
      - assert: Ползунок перемещается на шкале в то место, куда кликнули
    Проверка реакции на управление контролами при помощи клавиатуры (пример № 4 - Со скрытыми инпутами):
      - do: Навести фокус на ползунок примера № 4 (Со скрытыми инпутами) нажатием клавиши Tab
      - assert: Когда элемент в фокусе, у него появляется желтая рамка
      - do: Нажать на клавиши-стрелки 'влево' или 'вправо'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале
      - do: Нажать на клавиши-стрелки 'вниз' или вверх'
      - assert: Если элемент в фокусе, то ползунок перемещается соответственно влево или вправо по шкале

  Проверить корректность работы примера № 5 (Для указания диапазона):
    - do: Проверить корректность отображения примера № 5 (Для указания диапазона)
    - assert: Пример состоит из трех равномерных шкал от 0 до 100 и одной шкалы без указания значений
    - do: Проверить внешний вид первой шкалы
    - aseert: В первой шкале задан диапазон от 10 до 90; бегунки по умолчанию выставлены на 30 и 70; диапазон от левого бегунка до правого имеет желтый цвет
    - do: Переместить бегунки первой шкалы влево-вправо с помощью мышки
    - assert: Бегунки первой шкалы перемещаются по шкале влево-вправо с помощью мышки в пределах заданного диапазона; числа на бегунках меняются соответственно местоположению на шкале
    - assert: В числовых полях над первой шкалой значения равны числам, написанным на бегунках
    - do: Проверить внешний вид второй шкалы
    - aseert: Во второй шкале бегунки по умолчанию выставлены на 0 и 100; диапазон от левого бегунка до правого имеет желтый цвет
    - do: Переместить бегунки второй шкалы влево-вправо с помощью мышки
    - assert: Бегунки второй шкалы перемещаются по шкале влево-вправо с помощью мышки; числа на бегунках меняются соответственно местоположению на шкале
    - do: Проверить внешний вид третьей шкалы
    - assert: В третьей шкале задан диапазон от 10 до 90; бегунки по умолчанию выставлены на 30 и 70, имеют светло-серую прокраску; диапазон от левого бегунка до правого имеет темно-серый цвет
    - do: Навести курсор мыши на бегунки третьей шкалы и нажать на них левой клавишей мыши
    - assert: Бегунки третьей шкалы при нажатии на них уменьшаются в размере
    - do: Переместить бегунки третьей шкалы влево-вправо с помощью мышки
    - assert: Бегунки третьей шкалы перемещаются по шкале влево-вправо с помощью мышки в пределах заданного диапазона; числа на бегунках меняются соответственно местоположению на шкале
    - assert: В числовых полях над третьей шкалой значения равны числам, написанным на бегунках
    - do: Проверить внешний вид четвертой шкалы
    - assert: В четвертой шкале задан диапазон, бегунки круглой формы без указания значений в них; диапазон от левого бегунка до правого имеет темно-серый цвет
    - do: Навести курсор мыши на бегунок четвертой шкалы и нажать на него левой клавишей мыши
    - assert: При нажатии на бегунок его цвет меняется на темно-серый
    - do: Переместить бегунки четвертой шкалы влево-вправо с помощью мышки
    - assert: Бегунки четвертой шкалы перемещаются по шкале влево-вправо с помощью мышки в пределах заданного диапазона

  Проверить корректность работы примера № 6 (Реализованные размеры):
    - do: Проверить корректность отображения примера № 6 (Реализованные размеры)
    - assert: Пример состоит из трех колонок с бегунками разной формы и размера
    - assert: Внешний вид и наполнения примера соответствует предыдущей версии примера
    - do: Нажать на кнопку toggle disabled
    - assert: Элементы примера переходят в состояние disabled; если элемент в состоянии disabled, то на него не переводится фокус при помощи нажатия клавиши Tab; элемент в состоянии disabled игнорирует нажатия мышкой

  Проверить корректность работы примера № 7 (Неактивные слайдеры):
    - do: Проверить корректность отображения примера № 7 (Неактивные слайдеры); убедиться, что функциональность блока недоступна, если блок в состоянии disabled.
    - assert: Пример состоит из неактивных слайдеров
    - do: Навести курсор на слайдеры и нажать левую клавишу мыши
    - assert: Неактивные слайдеры не реагирую на нажатие мыши
    - do: Навести фокус на слайдеры клавишей Tab клавиатуры
    - assert: Неактивные слайдеры не получают фокус по клавише Tab

  Проверить корректность работы примера № 8 (С другими контролами):
    - do: Проверить корректность отображения примера № 8 (С другими контролами)
    - assert: Пример состоит из блока, в который входят 6 кнопок, радио кнопка, шкала с заданным диапазоном, строка инпута и поле ввода текста
    - do: Нажать, а затем отпустить кнопку 'Кнопка'
    - assert: При нажатии кнопка меняет цвет с белого на светло-серый; если кнопку отпустить, цвет снова становится белым
    - do: Нажать на кнопку 'группа'
    - assert: Кнопка становится желтой; соседняя кнопка 'Радио' становится белой
    - do: Нажать на белую кнопку 'Радио'
    - assert: Кнопка становится желтой; цвет кнопки 'группа' меняется на белый
    - do: Нажать на кнопку 'Чекбокс-кнопкой'
    - assert: Цвет кнопки меняется на желтый
    - do: Повторно нажать на кнопку 'Чекбокс-кнопкой'
    - assert: Цвет кнопки опять становится белым
    - do: Нажать на кнопку 'Селект'
    - assert: Раскрывается выпадающее меню, в котором пункт 'Селект' отмечен маркером (галочкой) и имеются еще два пункта
    - do: Нажать, а затем отпустить кнопку 'Я.Submit'
    - assert: При нажатии кнопка меняет цвет с желтого на темно-желтый; если кнопку отпустить, ее цвет снова становится желтым
    - do: Нажать на кружок слева от подписи 'радио кнопка'
    - assert: В кружке появляется черная точка
    - do: Подвигать влево-вправо бегунки на шкале с помощью мыши
    - assert: В шкале бегунки двигаются влево-вправо с помощью мышки в пределах заданного диапазона; расстояние между бегунками выкрашено в желтый цвет
    - do: Кликнуть в строку инпута
    - assert: Строка инпута переходит в состояние 'в фокусе' (появляется желтая рамка)
    - do: Ввести в инпут произвольный текст
    - assert: В правом углу инпута появляется крестик очищения
    - do: Нажать на крестик очищения
    - assert: Введенный текст пропадает
    - do: Ввести в инпут произвольный текст, объем которого превышает ширину инпута
    - assert: В строке инпута показывается последняя часть текста; первую можно увидеть, отлистав текст к началу
    - do: Кликнуть в поле ввода текста
    - assert: Поле ввода текста переходит в состояние 'в фокусе' (появляется желтая рамка)
    - do: Ввести в поле ввода произвольный текст
    - assert: Длина и ширина поля не меняются
    - do: Ввести в поле ввода произвольный текст, объем которого превышает размеры поля по умолчанию
    - assert: Справа в поле ввода появляется вертикальная прокрутка

  Проверить корректность работы примера № 9 (Часы работы):
    - do: Проверить корректность отображения примера № 9 (Часы работы)
    - assert: Пример представляет собой три колонки, в первой из которых указаны дни недели; вторая колонка содержит строки со времем начала и конца работы; третья строка содержит шкалы с заданным диапазоном
    - assert: В третьей колонке бегунки в шкалах с первой по пятую по умолчанию выставлены на время 08:00 и 18:00; в шкалах с шестой по седьмую - на время 00:00 и 00:00
    - assert: Шкала между бегунками выкрашена в желтый цвет
    - assert: Бегунки в шкалах с первой по пятую двигаются в пределах заданного диапазона
    - assert: Бегунки в шкалах с шестой по седьмую не двигаются
    - do: Заменить в первой строке второй колонки значения времени на 10:00 и 15:00
    - assert: Бегунки в первой шкале смещаются, в них показываются значения 10:00 и 15:00 соответственно
    - do: Заменить в первой строке второй колонки значения времени на 07:00 и 19:00
    - assert: В первой строке второй колонки значения заменяются на 8:00 и 18:00 (значения по умолчанию), бегунки в первой шкале смещаются на значения 8:00 и 18:00

  Проверить корректность работы примера № 10 (Не выходящий за границы блока):
    - do: Проверить корректность работы примера № 10 (Не выходящий за границы блока)
    - assert: Пример представляет собой две шкалы
    - assert: В правом верхнем углу первая шкала имеет один числовой инпут, вторая шкала - два числовых инпута
    - assert: Числовые инпуты для обеих шкал имеют крестики очищения; при клике в любой числовой инпут мышкой он становится в фокусе (появляется желтая рамка)
    - assert: В первой шкале бегунок один; шкала проложена от 0 до 100
    - assert: Во второй шкале два бегунка, по умолчанию выставленных на 0 и 100; шкала между бегунками прокашена в желтый цвет
    - do: Переместить бегунок в первой шкале примера влево-вправо кликами мышкой или перетаскиванием курсором мышки
    - assert: Бегунок перемещается влево-вправо, значение в числовом инпуте меняется в соответствии со значением в бегунке
    - do: Ввести в числовой инпут для первой шкалы несколько раз числа от 0 до 100
    - assert: Бегунок перемещается по шкале в соответствии с заданным числом; значение на бегунке соответствует значению в числовом инпуте
    - do: Ввести в числовой инпут для первой шкалы число меньше 0
    - assert: Бегунок перемещается в начало шкалы, на нем написано '0'; в числовом инпуте автоматически проставляется '0'
    - do: Ввести в числовой инпут для первой шкалы число больше 100
    - assert: Бегунок перемещается в конец шкалы, на нем написано '100'; в числовом инпуте автоматически проставляется '100'
    - do: Переместить бегунки во второй шкале примера влево-вправо кликами мышкой или перетаскиванием курсором мышки
    - assert: Бегунки перемещаются влево-вправо; значения в числовых инпутах меняются в соответствии со значениями в бегунках
    - do: Ввести в числовые инпуты для второй шкалы несколько раз числа от 0 до 100
    - assert: Бегунки перемещаются в соответствии с заданными числами; значения на бегунках соответствуют значениям в числовых инпутах
    - do: Ввести в первый числовой инпут для второй шкалы число меньше 0
    - assert: Бегунок перемещается в начало шкалы, на нем написано '0'; в числовом инпуте автоматически проставляется '0'
    - do: Ввести во второй числовой инпут для второй шкалы число больше 100
    - assert: Бегунок перемещается в конец шкалы, на нем написано '100'; в числовом инпуте автоматически проставляется '100'

  Проверить корректность работы примера № 11 (С одним бегунком и шагом 0.1):
    - do: проверить корректность работы примера № 11 (С одним бегунком и шагом 0.1)
    - assert: Пример представляет собой шкалу от 0 до 10 с одним бегунком; вверху справа от шкалы находится числовой инпут с введенным по умолчанием значением 5 и крестиком очищения
    - assert: По умолчанию бегунок выставлен на середину шкалы, в нем выставлено значение 5
    - do: Переместить бегунок по шкале влево-вправо кликами мышкой или перемещением курсором мышки
    - assert: Бегунок двигается по шкале влево-вправо с шагом 0.1; значение в числовом инпуте равно значению, указанному на бегунке
    - do: Ввести в числовой инпут число 4.57
    - do: Бегунок смещается по шкале; в числовом инпуте введенное число автоматически округляется до 4.6; значение на бегунке равно значению в числовом инпуте
    - do: Ввести в числовой инпут число меньше 0
    - assert: Левый бегунок выставляется на значение 0
    - do: Ввести в числовой инпут число больше 10
    - assert: Правый бегунок выставляется на значение 10


files: []

v-team: lego

example: /all/all.html

manager:
  - kuznecov

qa-engineer:
  - spiker

priority:
  - high

tags:
  - bem
