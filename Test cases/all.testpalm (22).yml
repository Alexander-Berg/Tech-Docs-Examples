feature: select2

description: Блок используется для создания раскрывающегося меню с возможностью одиночного или множественного выбора. Блок визуально представлен кнопкой и выпадающим списком. Для платформы desktop не тестируем пример touch-native.

specs:
  Проверить корректность работы примера № 1 (Theme & Size & Nouveaux):
    Проверка внешнего вида (пример № 1 - Theme & Size & Nouveaux):
      - do: Проверить внешний вид примера № 1 (Theme & Size & Nouveaux
      - assert: Пример представляет собой две строки (темы normal и pseudo), в каждую из которых входят по четыре кнопки (элемента) разных размеров
      - assert: По умолчанию в каждом элементе выбрано значение 'Каждый'
    Проверка корректности работы примера с мышкой (пример № 1 - Theme & Size & Nouveaux):
      - do: Навести курсор мыши поочередно на каждый из элементов с темой normal и pseudo
      - assert: При наведении курсора мыши на элемент его рамка и заливка становятся более темными
      - do: Кликнуть правой кнопкой мыши по элементу с темой normal и pseudo
      - assert: Появляется контекстное меню браузера; заливка элемента темнеет в момент клика, после чего возвращается в исходное состояние
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - assert: Появляется выпадающее меню с выбором вариантов; пункт выпадающего меню, на который наведен курсор, имеет темно-серый фон
      - do: Выбрать любой пункт выпадающего меню, кроме disabled, в качестве активного
      - assert: Выпадающее меню закрывается, выбранный пункт меню показывается в элементе
      - do: Повторно нажать на элемент, выбранный в качестве активного
      - assert: Пункт меню имеет темно-серый фон и маркер выбора (галочку)
      - do: Навести курсор на пункт выпадающего меню, отмеченный как disabled
      - assert: Цвет фона выбранного пункта не меняется, шрифт остается светло-серым, не реагирует на клики
      - do: Левой кнопкой мыши открыть выпадающее меню у любого элемента normal или pseudo
      - do: После открытия меню кликнуть левой кнопкой мыши за его пределами
      - assert: Выпадающее меню скрывается
    Проверка корректности работы примера с клавиатурой (пример № 1 - Theme & Size & Nouveaux):
      - do: Проверить переключение между элементами с помощью клавиши Tab
      - assert: При нажатии Tab выбранный элемент получает фокус (цвет рамки темнеет)
      - do: Если элемент находится в фокусе, нажать клавиши 'стрелка вверх', 'стрелка вниз', Space/Пробел или Enter/Ввод
      - assert: Открывается выпадающее меню
      - assert: По выпадающему меню можно перемещаться с помощью клавиш-стрелок 'вверх' и 'вниз'
      - do: В открытом выпадающем меню нажать клавишей 'Пробел' на любом выбранном пункте меню, кроме disabled
      - assert: Меню закрывается, в элементе показывается выбранный пункт меню
      - do: Повторно открыть выпадающее меню
      - assert: Выбранный пункт имеет маркер выбора (галочку)
      - do: Открыть меню у любого элемента и попытаться выбрать пункт disabled при переключении между пунктами меню клавишами-стрелками 'вниз' и 'вверх'
      - assert: Пункт disabled не выбирается
      - do: Клавишами-стрелками 'вниз' и 'вверх', 'Пробел' или Enter открыть выпадающее меню у любого элемента normal или pseudo
      - do: После открытия меню нажать клавишу Esc
      - assert: Выпадающее меню скрывается
    Проверка работы кнопок (пример № 1 - Theme & Size & Nouveaux):
      - do: Нажать на кнопку toggle disabled над элементами normal и pseudo
      - assert: Все элементы переходят в состояние disabled; не реагируют на клики мыши или нажатия клавиш
      - do: Повторно нажать на кнопку toggle disabled
      - assert: Элементы перестают быть disabled
      - do: Нажать на кнопку toggle background над элементами normal и pseudo
      - assert: Фон у блока с элементами normal и pseudo изменился
      - do: Повторно нажать на кнопку toggle background
      - assert: Цвет фона становится исходным
      - do: Нажать на кнопку 'cycle tone' над элементами normal и pseudo
      - assert: Элементы normal становятся красными, элементы pseudo обесцвечиваются; в кнопке появляется надпись '(tone:red)'
      - do: Кликнуть любой элемент
      - assert: Открывается выпадающее меню с красным фоном и белым шрифтом; выбранные пункты получают красный шрифт и белый фон
      - do: Повторно нажать на кнопку 'cycle tone' над элементами normal и pseudo
      - assert: Элементы normal получают серую заливку, элементы pseudo - белую с черной рамкой; в кнопке появляется надпись '(tone:grey)'
      - do: Кликнуть любой элемент
      - assert: Открывается выпадающее меню с белым фоном и серым шрифтом; выбранные пункты получают белый шрифт и синий фон
      - do: Повторно нажать на кнопку 'cycle tone' над элементами normal и pseudo
      - assert: Элементы normal получают темную заливку и белые символы, элементы pseudo - белую заливку и светло-серые символы; в кнопке появляется надпись '(tone:dark)'
      - do: Кликнуть любой элемент
      - assert: Открывается выпадающее меню с темным фоном и белым шрифтом; выбранные пункты получают темный шрифт и белый фон
      - do: Повторно нажать на кнопку 'cycle tone' над элементами normal и pseudo
      - assert: Элементы возвращаются в исходное состояние; в кнопке появляется надпись '(tone:default)'

  Проверить корректность работы примера № 2 (Theme & Size):
    Проверка внешнего вида (пример № 2 - Theme & Size):
      - do: Проверить внешний вид примера № 2 (Theme & Size)
      - assert: Пример представляет собой две строки (темы normal и pseudo), в каждую из которых входят по три кнопки (элемента) разных размеров
      - assert: По умолчанию в каждом элементе выбрано значение 'Каждый'
    Проверка корректности работы примера с мышкой (пример № 2 - Theme & Size):
      - do: Навести курсор мыши поочередно на каждый из элементов с темой normal и pseudo
      - assert: При наведении курсора мыши на элемент рамка становится более темной
      - do: Кликнуть правой кнопкой мыши по элементу с темой normal и pseudo
      - assert: Появляется контекстное меню браузера, сам элемент никак не реагирует на нажатие
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - assert: Появляется выпадающее меню с выбором вариантов; внешний вид и содержимое выпадающего меню соответствует примеру из предыдущей версии библиотеки
      - do: Навести курсор на активный пункт выпадающего меню для каждого из элементов примера (активными являются все пункты выпадающего меню, кроме предпоследнего - он прокрашен в серый цвет, т.е. в состоянии disabled)
      - assert: При наведении курсора на элемент выпадающего списка цвет фона становится желтым
      - do: Навести курсор на элемент выпадающего списка в состоянии disabled (предпоследний пункт выпадающего меню с серым шрифтом)
      - assert: Цвет фона для этого элемента не меняется?
      - do: Кликнуть левой кнопкой мыши по активному пункту выпадающего меню для каждого из элементов примера (активными являются все пункты выпадающего меню, кроме предпоследнего - он прокрашен в серый цвет, т.е. в состоянии disabled)
      - assert: Пункт меню переходит в состояние 'выбрано' (слева отметка о том, что он выбран), выпадающее меню закрывается
      - do: Повторно открыть выпадающее меню
      - assert: У выбранного ранее пункта выпадающего меню установлен признак выбора (галочка)
      - do: Снова кликнуть левой кнопкой мыши по уже выбранному пункту выпадающего меню
      - assert: Выбранный элемент остается выбранным
      - assert: Фокус устанавливается сразу на выбранный элемент (если открыть выпадающее меню после того, как один из элементов выпадушки выбран, то при последующем открытии выпадающего меню у выбранного пункта меню будет желтый фон и маркер выбора)
      - do: Кликнуть левой кнопкой мыши по пункту выпадающего меню в состоянии disabled (предпоследний пункт выпадающего меню с серым шрифтом)
      - assert: Элемент в состоянии disabled не реагирует на нажатия
      - assert: Элементы в состоянии disabled НЕ переходят в нажатое состояние по клику
    Проверка клика мышкой за пределами выпадающего меню (пример № 2 - Theme & Size):
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - do: После того, как на экране появляется выпадающее меню, кликнуть за пределами выпадающего меню
      - assert: Выпадающее меню исчезает с экрана (т.е. выпадающее меню исчезает при потере фокуса)
    Проверка работы клавиши Esc (пример № 2 - Theme & Size):
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - assert: После того, как на экране появляется выпадающее меню, нажать на клавиатуре клавишу Esc
      - assert: Выпадающее меню исчезает
    Проверка нажатия кнопки (пример № 2 - Theme & Size):
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - do: После того, как на экране появится выпадающее меню, нажать на кнопку
      - assert: Выпадающее меню исчезает
    Проверка работы скролла (пример № 2 - Theme & Size):
      - do: Кликнуть левой кнопкой мыши по элементу с темой normal и pseudo
      - do: После того, как на экране появляется выпадающее меню, проскроллить страницу вниз
      - assert: При скролле страницы выпадающее меню работает корректно; оно остается под тем же элементом, под которым вызывалось
      - assert: При скролле выпадающее меню уходит с экрана вслед за элементом, по клику на который было вызвано
    Проверка управления контролами с клавиатуры (пример № 2 - Theme & Size):
      - do: Нажать на клавишу Tab
      - assert: Элементы получают фокус; при получении фокуса у элементов примера появляется желтая рамка
      - do: Навести курсор на элемент в фокусе (когда у элемента есть желтая рамка)
      - assert: Внешний вид элемента не меняется
      - do: Когда элемент в фокусе (есть желтая рамка), нажать любую из клавиш 'стрелка вверх', 'стрелка вниз', Space/Пробел и Enter/Ввод
      - assert: Открывается выпадающее меню
      - do: Вызвать выпадающее меню любого элемента
      - assert: По выпадающему меню можно перемещаться при помощи клавиш 'стрелка вверх', 'стрелка вниз'
      - assert: Во время перемещения по меню при помощи клавиатуры фон у выделенного пункта становится желтым
      - assert: При перемещении между пунктами выпадающего меню при помощи клавиатуры фокус не устанавливается на пункт в состоянии disabled (предпоследний пункт серого цвета)
      - do: Установить фокус на первый пункт выпадающего меню (у первого пункта есть желтая рамка) и нажать на клавишу 'стрелка вверх'
      - assert: Фокус переводится на последний пункт меню
      - do: Установить фокус на последний пункт выпадающего меню (у последнего пункта есть желтая рамка) и нажать на клавишу 'стрелка вниз'
      - assert: Фокус переводится на первый элемент списка
      - do: Навести фокус на пункт меню (у пункта есть желтая рамка и список выбора не открыт) и кликнуть за пределами меню
      - assert: Желтая рамка пропадает
      - do: Навести фокус на любой элемент (у элемента есть желтая рамка, список выбора не открыт) и нажать на любую клавишу, отличную от Space/Пробел, Enter/Ввод и клавиш-стрелок
      - assert: Выпадающее меню не появляется
      - do: Вызвать выпадающее меню у любого элемента примера, навести фокус на любой пункт меню (у пункта есть желтая рамка и список выбора не открыт) и нажать на любую клавишу, отличную от Space/Пробел и Enter/Ввод
      - assert: Пункт выпадающего меню не переходит в выбранное состояние
    Проверка работы элементов в состоянии disabled (пример № 2 - Theme & Size):
      - do: Перевести элементы в состояние disabled, нажав на кнопку toggle disabled
      - assert: Элементы примера переходят в состояние disabled; внешне это выражается в том, что элементы примера становятся серыми
      - do: Попробовать перевести фокус на элемены при помощи клавиатуры (по нажатию на клавишу Tab)
      - assert: На элементы в состоянии disabled нельзя перевести фокус; фокус перемещается на элементы примера, следующие за элементами в состоянии disabled
      - assert: Элементы в состоянии disabled не реагируют на нажатия
      - do: Кликнуть по элементам примера в состоянии disabled левой и правой кнопками мыши
      - assert: Внешний вид элементов никак не меняется

  Проверить корректность работы примера № 3 (Types):
    Проверка внешнего вида (пример № 3 - Types):
      - do: Проверить внешний вид примера № 3 (Types)
      - assert: Пример включает в себя четыре элемента - без названия, radio, check и radiocheck
      - assert: Первый элемент представляет собой выпадающее меню без возможности выбора пункта
      - assert: Второй элемент представляет собой выпадающий список-радио (можно выбрать только один пункт списка, снять выделение нельзя)
      - assert: Третий элемент представляет собой выпадающий список-чек (можно выбрать каждый из пунктов списка, выбор можно снять с любого пункта списка)
      - assert: Четвертый элемент представляет собой выпадающий список-радиочек (можно выбрать один элемент списка, с выбранного элемента можно снять выбор)
    Проверка работы первого элемента примера (пример № 3 - Types):
      - do: Вызвать выпадающее меню у первого элемента
      - do: Нажимать на пункты выпадающего меню
      - assert: При нажатии на пункты выпадающего списка они не выбираются, выпадающее меню не закрывается
      - do: Вызвать выпадающее меню у первого элемента и выбрать пункт меню при помощи клавиатуры (клавишей Space/Пробел или Enter/Ввод)
      - assert: Пункт выпадающего меню не переходит в нажатое состояние, но при этом, в отличие от клика мышкой, выпадающее меню закрывается
    Проверка работы второго элемента примера (пример № 3 - Types):
      - do: Проверить внешний вид второго элемента примера - радио-списка
      - assert: По умолчанию в радио-списке выбран пункт 'Охотник'
      - assert: Выбранные пункты отображаются на контроле, когда поле ввода закрыто
      - do: Нажать на поле ввода и кликнуть на выбранный пункт
      - assert: Выбор с пункта меню не снимается
      - do: Открыть выпадающее меню и нажать на пункт, отличный от выбранного
      - assert: Выбор переводится на новый пункт
      - do: Открыть выпадающее меню и при помощи клавиатуры поставить фокус на еще не выбранный пункт, затем нажать клавишу Enter/Ввод или Space/Пробел
      - assert: Выбор переводится на новый пункт
    Проверка работы третьего элемента примера (пример № 3 - Types):
      - do: Проверить внешний вид третьего элемента примера - чек-списка
      - assert: По умолчанию в чек-списке выбраны элементы 'Желает' и 'Знать'
      - assert: По умолчанию элемент находится в состоянии 'выбран' (внешне это выражается в том, что у элемента примера желтый фон; на элементе указаны выбранные пункты выпадающего меню)
      - do: Навести курсор мыши на элемент, находящийся в состоянии 'выбрано'
      - assert: Рамка элемента становится более темной, цвет фона не меняется
      - do: Открыть выпадающее меню и выбрать несколько пунктов
      - assert: Ширина элемента меняется в зависимости от количества выбранных пунктов
      - do: Закрыть выпадающее меню
      - assert: Все выбранные пункты выпадающего меню отображаются в шапке элемента
      - do: Вызвать выпадающее меню и снять выделение со всех его пунктов
      - assert: Меню переходит в состояние 'ничего не выбрано', фон элемента становится белым
      - do: Перевести чек-список в состояние disabled, когда в меню выбраны какие-то пункты
      - assert: Элемент становит серым, но т.к. в нем есть выбранные пункты, то он темнее чем другие примеры в состоянии disabled, которые не были в состоянии 'выбрано' до того, как перешли в состояние disabled
      - do: Снять с элемента состояние disabled, повторно нажав на кнопку toggle disabled
      - do: Открыть выпадающее меню и при помощи клавиатуры поставить фокус на еще не выбранный пункт
      - do: Нажать на кнопку Enter/Ввод или Space/Пробел
      - assert: Выбор переводится на новый пункт меню
    Проверить работу четвертого элемента примера (пример № 3 - Types):
      - do: Проверить внешний вид четвертого элемента примера - радиочек-списка
      - assert: По умолчанию в радиочек-списке не выбрано ни одного пункта меню
      - do: Открыть выпадающее меню и выбрать один из активных пунктов
      - assert: Выбранный пункт переходит в выбранное состояние, выпадающее меню закрывается, закрытый радиочек-список переходит в выбранное состояние (фон становится желтым, вместо прочерка показывается выбранный пункт выпадающего меню)
      - do: Открыть выпадающее меню и нажать на выбранный пункт
      - assert: Выбор снимается, элемент переходит в состояние, когда выбор не сделан (фон становится белым, вместо выбранного пункта отображается прочерк)
      - do: Перевести радиочек-список в состояние disabled с помощью кнопки toggle disabled у примера № 2 (Theme & Size), когда в меню выбран какой-то пункт
      - assert: Элемент становит серым, но т.к. в нем есть выбранные пункты, то он темнее, чем другие примеры в состоянии disabled, которые не были в состоянии 'выбрано' до того, как перешли в состояние disabled
      - do: Снять с элемента состояние disabled, повторно нажав на кнопку toggle disabled
      - do: Открыть выпадающее меню и снять выделение со всех пунктов
      - assert: Меню переходит в состояние 'ничего не выбрано', фон элемента становится белым, вместо выбранного значения в шапке элемента указывается прочерк
      - do: Открыть выпадающее меню и при помощи клавиатуры поставить фокус на еще не выбранный пункт
      - do: Нажать на кнопку Enter/Ввод или Space/Пробел
      - assert: Выбор переводится на новый пункт меню

  Проверить корректность работы примера № 4 (Text):
    - do: Проверить работу примера № 4 (Text)
    - assert: Первый элемент примера должен переходить в выбранное состояние, но не показывать выбранные пункты
    - assert: Второй элемент примера должен переходить в выбранное состояние и показывать выбранные пункты в закрытом состоянии
    - assert: По умолчанию в обоих элементах примера ничего не выбрано; если ничего не выбрано, то у списка белый фон и фраза 'Text'
    - do: Открыть выпадающее меню у первого элемента и выбрать один или несколько пунктов
    - assert: Элемент переходит в нажатое состояние (фон становится желтым), фраза 'Text' остается в заглавии, выбранные пункты не отображаются в шапке элемента
    - assert: Внешний вид и наполнение первого элемента соответствуют примеру из предыдущей версии библиотеки
    - do: Открыть выпадающее меню у второго элемента и выбрать один или несколько пунктов
    - assert: Элемент переходит в нажатое состояние, в заголовке списка отображаются выбранные пункты выпадающего меню
    - assert: Внешний вид и наполнение второго элемента соответствуют примеру из предыдущей версии библиотеки

  Проверить корректность работы примера № 5 (Icons):
    - do: Проверить работу примера № 5 (Icons) с иконками
    - assert: В первом элементе примера иконки отображаются в выпадающем меню и в закрытом списке выбора
    - assert: По умолчанию в обоих элементах примера выбран пункт 'Нож охотничий' с иконкой загрузки
    - do: Открыть выпадающее меню в первом элементе примера
    - assert: У пунктов 'Нож охотничий', 'Топор', 'Металлическая линейка', 'Вилка', 'Зубная щетка' отображаются иконки
    - do: В выпадающем меню выбрать пункт с иконкой и закрыть выпадающее меню
    - assert: Соответствующая иконка отображается в шапке элемента
    - do: Открыть выпадающее меню во втором элементе примера
    - assert: У пунктов 'Нож охотничий', 'Топор', 'Металлическая линейка', 'Вилка', 'Зубная щетка' НЕ отображаются иконки
    - do: В выпадающем меню выбрать любой из первых пяти пунктов и закрыть выпадающее меню
    - assert: В шапке элемента показываются название пункта выпадающего меню и его иконка


  # Проверить корректность работы примера № 6 (Touch-native):
    # непонятно, нужны ли здесь проверки на десктопах

  Проверить корректность работы примера № 7 (Width):
    - do: Открыть выпадающее меню примера № 7 (Width) и выбрать все пункты
    - do: Растянуть область примера по всей длине экрана, потом снять выбор со всех пунктов выпадающего меню
    - assert: Все пункты выпадающего меню выбираются
    - assert: Все выбранные пункты отображаются в шапке выпадающего меню
    - assert: Если снять выбор со всех пунктов, то в шапке отображается слово 'Text'
    - assert: Шапка растягивается по длине выбранных элементов, т.е. так, чтобы пользователь мог видеть все выбранные пункты выпадающего меню, но не больше
    - assert: Если шапка со всеми выбранными пунктами выпадающего меню не помещается в поле примера, то шапка растягивается по всей длине поля примера; текст, не влезающий в шапку, заменяется многоточием
    - do: Открыть выпадающее меню примера и уменьшить количество выбранных пунктов
    - assert: Размер шапки уменьшается; длина шапки выстраивается под количество выбранных пунктов выпадающего меню

  Проверить корректность работы примера № 8 (Width Max):
    - do: Потянуть вправо область примера № 8 (Width Max) курсором мыши
    - assert: По горизонтали длина шапка примера занимает все допустимое пространство
    - do: Максимально растянуть область примера
    - assert: Шапка примера занимает всю область примера
    - assert: Вне зависимости от того, сколько пунктов выпадающего меню выбрано, пример всегда занимает всю горизонталь области примера
    - do: Уменьшить область примера, потянув ее влево
    - assert: Длина шапки примера так же уменьшается; текст, который при этом не влезает в шапку, замещается многоточием

  Проверить корректность работы примера № 9 (Width Fixed):
    - do: Потянуть вправо область примера № 9 (Width Fixed) курсором мыши
    - assert: Область примера растягивается по горизонтали, длина шапки примера не меняется
    - do: Открыть выпадающее меню и выбрать в нем несколько пунктов
    - assert: Длина шапки примера не изменилась; текст в шапке, превышающий по размеру ее длину, замещается многоточием
    - do: Открыть выпадающее меню и выбрать в нем все пункты
    - assert: Длина шапки примера не изменилась; текст в шапке, превышающий по размеру ее длину, замещается многоточием
    - do: Уменьшить размер области примера так, чтобы шапка не помещалась в области примера
    - assert: Размер шапки не меняется

  Проверить корректность работы примера № 10 (Reset & Submit):
    - do: Проверить внешний вид примера № 10 (Reset & Submit)
    - assert: Пример состоит из трех элементов с выпадающим меню и двух кнопок - 'Submit' и 'Reset'
    - do: Кликнуть первый элемент (в шапке темно-серый фон, белый шрифт)
    - assert: Открывается выпадающее меню с выбранным по умолчанием словом 'Каждый'; пункт в фокусе имеет темно-серый фон и белый шрифт
    - do: В выпадающем меню отметить все пункты и свернуть его
    - assert: Ширина элемента увеличивается; в шапке показаны все выбранные пункты меню
    - do: Кликнуть второй элемент (в шапке светло-серый фон, темный шрифт)
    - assert: Открывается выпадающее меню с выбранным по умолчанием словом 'Каждый'; пункт в фокусе имеет темно-серый фон и белый шрифт
    - assert: В выпадающем меню второго элемента нельзя выбрать более одного пункта
    - do: Кликнуть третий элемент (в шапке темно-серый фон, белый шрифт)
    - assert: Открывается выпадающее меню с выбранным по умолчанием словом 'Каждый'; пункт в фокусе имеет темно-серый фон и белый шрифт
    - do: Выбрать в выпадающем меню первого элемента первые четыре пункта, второго элемента - слово 'Желает', третьего - 'Знать'
    - do: Нажать кнопку 'Submit'
    - assert: Происходит обновление страницы; после обновления элементы возвращаются в исходное состояние
    - tech: в урл к адресу прибавляются параметры ?select2-check=red&select2-check=orange&select2-check=yellow&select2-check=green&select2-radio=yellow&select2-radiocheck=green
    - do: Выбрать в выпадающем меню первого элемента первые четыре пункта, второго элемента - слово 'Желает', третьего - 'Знать'
    - do: Нажать кнопку 'Reset'
    - assert: Элементы возвращаются в исходное состояние без обновления страницы

  Проверить корректность работы примера № 11 (Height):
    - do: Кликнуть по примеру № 11 (Height)
    - assert: Открывается выпадающее меню из 4 строк
    - assert: Справа от пунктов меню появляется полоса прокрутки
    - do: Проскроллить меню вниз
    - assert: Выпадающее меню можно проскроллить в конец списка, появляются еще 3 пункта меню
    - do: Проскроллить выпадающее меню при помощи клавиатуры (клавишами 'стрелка вверх' или 'стрелка вниз')
    - assert: Пункты выпадающего меню скроллятся циклически (то есть если фокус стоит на последнем элементе и мы нажимаем клавишу вниз на клавиатуре, фокус переходит на первый элемент; если фокус стоит на первом элементе и мы нажимаем клавишу вверх на клавиатуре, фокус переходит на последний элемент)

  Проверить корректность работы примера № 12 (Control):
    - do: Проверить внешний вид кнопки № 12 (Control)
    - assert: По умолчанию в кнопке указан текст 'Каждый'; слева от текста отображается иконка

  Проверить корректность работы примера № 13 (Big Select):
    - do: Проверить внешний вид примера № 13 (Big Select)
    - assert: Пример представляет собой элемент темного света; по умолчанию в шапке написано 'Доклад 1'; цвет шрифта белый
    - do: Кликнуть пример
    - assert: Открывается выпадающее меню из 60 пунктов; пункт в фокусе имеет светлый фон и темный шрифт
    - assert: В выпадающем меню нельзя выбрать больше одного пункта
    - do: Выбрать любой пункт примера и закрыть выпадающее меню
    - assert: В шапке примера отображается название выбранного пункта выпадающего меню
    - do: Вызвать заново выпадающее меню, проскроллить его вниз до конца
    - assert: Выпадающее меню скроллится, справа от пунктов меню появляется полоска вертикального скролла; суммарно выпадающее меню содержит 60 пунктов
    - assert: Выпадающее меню не скроллится циклически

files: []

v-team: lego

example: /all/all.html

manager:
  - kuznecov

qa-engineer:
  - spiker

priority:
  - high

tags:
  - forms
  - bem
